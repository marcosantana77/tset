echo "tset's on!"
echo ""

alias ll="ls -lta"
alias lockit="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
alias vb=vboxmanage\ 
alias vbgp="vb guestproperty"\ 
#alias vbst="vb startvm"\ 
alias vbct="vb controlvm"\
alias vblist="vb list vms"\ 
export tsetpath=$HOME/d/tset/

#tset 
function tset() {
  cd $tsetpath
  echo ""
  echo "[; hello, what r we up to ?"
  echo "" 
}

function tsetcode() {
  pushd $tsetpath 
  code . 
  popd 
}

function tsetsubl() {
  pushd $tsetpath
  subl .
  popd
}


#stuff 
function speedtesta() {
  curl -s https://raw.githubusercontent.com/sivel/speedtest-cli/master/speedtest.py | python - ;
} 

function speedtest() {
  speedtesta | grep -e 'Testing from' -e Hosted -e Download -e Upload;
}

function encurlit() { 
  echo -ne "$1" | hexdump -v -e '/1 "%02x"' | sed 's/\(..\)/%\1/g'; 
} 

function myip() { 
 ifconfig | grep inet\ ;
}

function histail() {
  history | tail -n "$1"
}

#sec stuff
function myports() { 
   nmap -p 1-65535  127.0.0.1; 
}

function sshkeygen() {
  ssh-keygen -t rsa -f $HOME/.ssh/"$1" -C "$2";
  chmod 400 $HOME/.ssh/"$1"; 
}


## derived from https://gist.github.com/epiloque/8cf512c6d64641bde388
## works for arrays of hashes, as long as the hashes do not have arrays
function parse_yaml2() {
    local prefix=$2
    local s
    local w
    local fs
    s='[[:space:]]*'
    w='[a-zA-Z0-9_]*'
    fs="$(echo @|tr @ '\034')"
    sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s[:-]$s\(.*\)$s\$|\1$fs\2$fs\3|p" "$1" |
    awk -F"$fs" '{
      indent = length($1)/2;
      if (length($2) == 0) { conj[indent]="+";} else {conj[indent]="";}
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
              vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
              printf("%s%s%s%s=(\"%s\")\n", "'"$prefix"'",vn, $2, conj[indent-1],$3);
      }
    }' | sed 's/_=/+=/g'
}


#gccloud stuff

alias gc="gcloud"
alias gcc="gc compute"
alias gcci="gcc instances"
alias gccd="gcc disks"
alias gc-b="gc beta"
alias gc-a="gc alpha"
alias gc-abill="gc alpha billing"
alias gc-bbill="gc beta billing"

alias gc-aci="gc-a compute instances"
alias gc-bci="gc-b compute instances"


export gcpath="$HOME/d/tset/bin/google-cloud-sdk/"
 
function gcact() {
  source ${gcpath}path.bash.inc;
  source ${gcpath}completion.bash.inc;
} 

function gcinit() {
  gcloud init;
}

function gclist() {
  gcci list; 
}

function gcdlist() {
  gccd list;
}

function gcdinfo() {
  gccd describe "$1"; 
}

function gcdidea() {
  gcdinfo | grep -e sizeGb -e id -e kind -e users:\
 - ;

}

function gcstart() {
  gcci start "$1"; 
}

function gcstop() {
 gcci stop "$1"; 
}

function gcrestart() {
  gcstop "$1" && gcstart "$1"
}

function gcinfo() {
  gcci describe "$1"; 
}
 
function gcidea() { 
  gcinfo "$1" | grep -e name: -e IP -e cpu -e creation -e status;
} 

function gcssh() {
  gcc ssh "$1";
}

function gcaddtag() {
  gcci add-tags "$1" --tags "$2" 
}

function gcrmvtag() {
  gcci remove-tags "$1" --tags "$2"
}


function gccicreate() {
  if [ $1 == help ]; then 
    echo "Usage of this command demands the following parameters, otherwise will not work."
    echo " "
    echo " [min 'projectname vmname diskname disksize serviceAccount scopes' | help ] "
  elif [ $1 == min ];
  then
    scope1="default,sql-admin,storage-full"

    echo ""
    echo "Confirm creation of new Google Cloud Compute Instance with the following setup: "
    echo "  Machine-Type        : f1-micro "
    echo "  Project             : $2"
    echo "  Instance Name       : $3"
    echo "  Service Account     : $6"
    echo "  Main Disk Name      : $4"
    echo "  Main Disk Size      : $5"
    echo "  Scopes              : $scope1"
    echo ""
    echo "Please, confirm (1/2):"

    select yn in "Yes" "No"; do
        case $yn in
          Yes ) gcloud compute --project "$2" instances create "$3" --zone "southamerica-east1-a" --machine-type "f1-micro" --subnet "default" --maintenance-policy "MIGRATE" --service-account "$6" --scopes $scope1 --tags "http-server" --image "debian-9-stretch-v20170918" --image-project "debian-cloud" --boot-disk-size "$5" --boot-disk-type "pd-ssd" --boot-disk-device-name "$4"; break;;
          No ) echo "the vm creation has been aborted"; break;;
        esac
    done

    #--min-cpu-platform "Automatic" 

  fi
}

function gccipcreate() {
  echo ""
  echo " this will reserve a new ip at Google Cloud Compute"
  echo " ... money is flowing out after this. Use wisely!"
  echo ""

  gcloud compute addresses create $1 --region southamerica-east1 
}




function gcbmake() {
  echo "gsutil mb -c regional -l southamerica-east1 gs://`echo "$1"`";
  gsutil mb -c regional -l southamerica-east1 gs://"$1"; 
}
 
#virtual box stuff

function vbostype() { 
  vb list ostypes; 
}

function vbcreatel64() { 

  vmhome=`pwd`/"$1" 
  vdipath=$vmhome/"$1".vdi

  mkdir $vmhome && cd $_
  
  let RamSize=1024\*"$2"
  let DiskSize=1024\*"$3"
 
  echo ""
  echo "===> creating vm... named:""$1"" "$RamSize" RAM"" "$DiskSize" Disk Size"
 
  vboxmanage createhd --filename $vdipath  --size=$DiskSize
  vboxmanage createvm --name "$1" --register --basefolder $vmhome --ostype='Linux_64'

  echo ""
  echo "===> creating hdd1..."

  vboxmanage storagectl "$1" --name "SATA Controller" --add sata --controller IntelAHCI
  vboxmanage storageattach "$1" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium $vdipath

  echo ""
  echo "===> creating dvd1..."

  vboxmanage storagectl "$1" --name "IDE Controller" --add ide   
  vboxmanage storageattach "$1" --storagectl "IDE Controller" --port 0 --device 0 --type dvddrive --medium "$4"


  echo "===> setting boot order..."
  vboxmanage modifyvm "$1" --boot1 dvd --boot2 disk --boot3 none --boot4 none
  echo "===> setting memories..."
  vboxmanage modifyvm "$1" --memory $RamSize --vram 128
  #echo "===> setting nic..."
  #vboxmanage modifyvm "$1" --nic1 bridged --bridgeadpater1 en1
}

function vbip() {
  echo `VBoxManage guestproperty get "$1" "/VirtualBox/GuestInfo/Net/0/V4/IP" | awk '{ print $2 }'`;
}

function vbst() { 
  vboxmanage showvminfo "$1" | grep -c "running (since"; 
}

function vbsave() {
  vboxmanage controlvm "$1" savestate;
}

function vbclone() {
  vboxmanage clonevm "$1" --name "$2" --mode all --basefolder "$3" --register;
}

function vbnic() {
  vboxmanage showvminfo "$1" | grep NIC;
}

function vbstart() {
 vboxmanage startvm "$1" --type headless;
 #sheSays "$1 started successfully"
}

function vbssh() { 
	
	ssh e4e5@`VBoxManage guestproperty get "$1" "/VirtualBox/GuestInfo/Net/0/V4/IP" | awk '{ print $2 }'`;

}

function vbshow() {
  vboxmanage startvm "$1";
}

function vboff() { 
  vboxmanage controlvm "$1" poweroff; 
}

function vbrestart() { 
  vboff "$1"; 
  vbstart "$1"; 
  sleep 50; 
  vbssh "$1"; 
}

#screen functions

function scls() { 
  screen -ls; 
}

function scr() { 
  screen -r "$1"; 
}

function scS() { 
  screen -S "$1"; 
}

function scSdm() {
  screen -Sdm $1 $2; 
}


#say functions

#portuguese voices
#Joana, Luciana
function elaFala() {
  say -v Joana "$1";
}

# english voices
# Karen, Samantha, Tessa
function sheSays() { say -v Karen "$1"; }


function testBaby() {
  sheSays "Baby, Baby"; 
  elaFala "Fica bonitinha. Ficafica bonitinha"; 
  sheSays "Baby, "; 
  elaFala "Nao me irritaaaa";
}  
