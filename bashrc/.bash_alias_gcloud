
#gcloud stuff

alias gg="gcloud"
alias ggc="gg compute"
alias ggci="ggc instances"
alias ggcd="ggc disks"
alias ggp="gg projects"
alias ggcfg="gg config"
alias ggcfgset="gg config set"
alias ggthis="gg config list"
alias gg-b="gg beta"
alias gg-a="gg alpha"
alias gg-abill="gg alpha billing"
alias gg-bbill="gg beta billing"
alias ggzlist="ggc zones list"
alias ggbrzlist="ggzlist | grep southamerica"

alias gg-aci="gg-a compute instances"
alias gg-bci="gg-b compute instances"


export ggpath="$HOME/d/tset/bin/google-cloud-sdk/"
 
function ggact() {
  source ${ggpath}path.bash.inc;
  source ${ggpath}completion.bash.inc;
} 

function gginit() {
  gcloud init;
}

function ggplist() {
  ggp list;
}

function ggpchange() { 
  ggcfgset project "$1"; 
}

function gglist() {
  ggci list; 
}

function ggdlist() {
  ggcd list;
}

function ggdinfo() {
  ggcd describe "$1"; 
}

function ggdidea() {
  ggdinfo "$1" | grep -e sizeGb -e id -e kind -e users:\
 - ;

}

function ggstart() {
  ggci start "$1"; 
}

function ggstop() {
 ggci stop "$1"; 
}

function ggrestart() {
  ggstop "$1" && ggstart "$1"
}

function gginfo() {
  ggci describe "$1"; 
}
 
function ggidea() { 
  gginfo "$1" | grep -e name: -e IP -e cpu -e creation -e status;
} 

function ggssh() {
  ggc ssh "$1";
}

function ggaddtag() {
  ggci add-tags "$1" --tags "$2" 
}

function ggrmvtag() {
  ggci remove-tags "$1" --tags "$2"
}

function ggfwcreate() {
  echo 'Creates an ingress allow port type firewall rule. Usage is': 
  echo 'ggfwcreate firewall-rule-name port-to-open target-tags'
  ggc firewall-rules create "$1" --direction=INGRESS --priority="$4" --network=default --action=ALLOW --rules=tcp:"$2" --source-ranges=0.0.0.0/0 --target-tags="$3" 
}

function ggcicreate() {
  if [ $1 == help ]; 
  then 
    echo "Usage of this command demands the following parameters, otherwise will not work."
    echo " "
    echo " [min 'projectname vmname diskname disksize serviceAccount scopes' | help ] "
  elif [ $1 == min ];
  then
    scope1="default,sql-admin,storage-full"
    scope2="default,storage-full,sql,compute-rw"

    echo ""
    echo "Confirm creation of new Google Cloud Compute Instance with the following setup: "
    echo "  Machine-Type        : f1-micro "
    echo "  Project             : $2"
    echo "  Instance Name       : $3"
    echo "  Service Account     : $6"
    echo "  Main Disk Name      : $4"
    echo "  Main Disk Size      : $5"
    echo "  Scopes              : $scope2"
    echo ""
    echo "Please, confirm (1/2):"

    select yn in "Yes" "No"; do
        case $yn in
          Yes ) gcloud compute --project "$2" instances create "$3" --machine-type "f1-micro" --scopes $scope2  --image-project "debian-cloud" --boot-disk-size "$5" --boot-disk-type "pd-ssd" --boot-disk-device-name "$4" --service-account "$6" --zone "southamerica-east1-a" --subnet "default" --maintenance-policy "MIGRATE" --tags "http-server" --image "debian-9-stretch-v20170918"; break;;
          No ) echo "the vm creation has been aborted"; break;;
        esac
    done

    #--min-cpu-platform "Automatic" 

  fi
}

function ggcipcreate() {
  echo ""
  echo " this will reserve a new ip at Google Cloud Compute"
  echo " ... money is flowing out after this. Use wisely!"
  echo ""

  gcloud compute addresses create $1 --region southamerica-east1 
}


function ggbmake() {
  echo "gsutil mb -c regional -l southamerica-east1 gs://`echo "$1"`";
  gsutil mb -c regional -l southamerica-east1 gs://"$1"; 
}

function ggzchange(){
  echo "gcloud config set compute/zone ${1}"
  ggcfgset compute/zone "$1"
}

